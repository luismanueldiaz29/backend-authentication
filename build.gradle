plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.6.3"
}

version = "0.1"
group = "com.luis.diaz.authentication"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor('io.micronaut.openapi:micronaut-openapi:4.6.0')

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation('org.modelmapper:modelmapper:3.1.0')
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:postgresql")
    implementation("io.micronaut:micronaut-validation")
    implementation("com.google.guava:guava:31.1-jre")

    implementation('io.micronaut.security:micronaut-security-jwt')
    implementation('io.jsonwebtoken:jjwt:0.9.1')
    implementation('com.auth0:java-jwt:4.2.1')
    implementation('com.auth0:jwks-rsa:0.21.2')
    implementation('javax.xml.bind:jaxb-api:2.4.0-b180830.0359')
    implementation('io.micrometer:micrometer-registry-prometheus:1.10.0')
    implementation('io.micronaut:micronaut-management')

}


application {
    mainClass.set("com.luis.diaz.authentication.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.luis.diaz.authentication.*")
    }
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dfile.encoding=UTF8'
}

